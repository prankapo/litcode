\section{Introduction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Artistic Nature of Computer Programs}

The study of computers and computations is a science. However, computer programming is an art. To understand
the difference between art and science we can read the following discussion on the subject by John Stuart
Mill:

\begin{quote}
Several sciences are often necessary to form the groundwork of a single art. Such is the complication of human
affairs, that to enable one thing to be done, it is often requisite to know the nature and properties of many
things. ... Art in general consists of the truths of Science, arranged in the most convenient order for
practice, instead of the order which is the most convenient for thought. Science and its truths so as to
enable us to take groups arranges in at one view as much as possible of the general order of the universe. Art
... brings together from parts of the field of science most remote from one another, the truths relating to
the production of the different and heterogeneous conditions necessary to each effect which the exigencies of
practical life require\cite{knuth1992literate}.
\end{quote}

A programmer writes a sequence of instructions to be given the computer so that a desired result can be
achived or `computed by the computer'. This sequence of instructions are what we call a program.
He\footnote{Read `He' as `He/she' throughout this article} has to skillfully use their knowledge about
different subjects, then learn some more, and then write the program step by step. There is lots of testing
and debugging involved. There is no well defined way to writing a program. Hence, it is an art. \\

The recent advancements in the field of machine learning have meant that large language models are able to put
together a crappy code to do some stuff, it may very well be possible that we do indeed make computer
programming a science. However, that would not take away the joy of writing programs. AI systems can play
Chess and Go much better than most of the humans on this entire planet, but we still play those games because
they are fun. Same goes for painting and photography --- we can tell a system like DALL-E to cook up a
painting or a drone to take the photograph of forest. However, humans will still continue to paint and click
photographs just because doing so gives us pleasure.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Structured Programming Methodology and Literate Programming}

Structured programming methodology arose as a way to introduce rigor into programming. It involves
constructing a program using three basic constructs --- sequential statements (which occur and are executed
one after the other), a conditional statement (\tt if\rm/\tt else\rm), and iterative statments (\tt for \rm
and \tt while \rm loops). Using these three basic constructs we can build simple blocks and functions which
work together to produce the result we desire.\\

Though structured programming allows us to write programs with some discipline, the act of writing a program
is still an art. Some later parts of a program might have been written before the parts which are executed at
the entry point. Moving from $A$ to $B$ in a program might have involved several complex steps, which a bunch
of comments won't explain well. When we see a program, we essentially see a structure which was made out of a
\it web \rm of ideas. This is the reason why we, programmers, have trouble understanding certain pieces of
code which we had written a few months back. When we wrote them, we were in the \it zone \rm and were able to
craft an edifice out of scattered ideas. Once we are done with a code, we are out of that zone. It takes
considerable effort to go from the edifice to the \it web \rm of ideas which created it so that we can
understand the paths to various rooms in the building.\\

We can remedy this by documenting our code. Every good programmer knows the utility of a good documentation.
However, almost every programmer hates to write documentation for their code. Why? Why would we hate to write
something which will only help us and others in understanding something?\\

A major reason for this general dislike is the distractive nature of writing a documentation. Even with all
its utility, it can become a distraction in a world where releases of a code base containing new features and
bug fixes are to be shipped out at a very rapid pace.\\

Also, a documentation might end up \textit{not} explaining matters clearly sometimes. After all it is
explaining the structure and not the ideas which lead to the creation of the structure. This documentation
will be helpful for someone who wishes to use a library in their project, but it won't be of a great help for
those who wish to understand the underlying construction of the structure. (Of course, you can explain the
ideas behind a piece of code in a traditional documentation, but then why not write literate programs and not
break your \it flow \rm).\\

To remedy the deficiencies of `traditional' programming and documentation, Donald Knuth came up with the
concept of \textit{Literate Programming}  \cite{knuth1984literate}. In literate programming, you essentially
write an essay which contains `chunks' of the source code present throughout it in an unstructured yet
\textit{natural} way. The prose explains the motivation and working of chunks. The source code inside a chunk
can be expanded by referencing other chunks from inside it or by simply expanding its definition in the later
part of the essay. We get the full structured program by combining the chunks together, a process which Knuth
calls \textit{tangling} as we are producing a tangled up piece out of web of ideas, something which a computer
can understand easily but some person not involved in the development might have trouble understanding. To
produce a documentatiom, you pass the essay through a markup processing engine like \TeX \ or \LaTeX \ to
produce a \texttt{DVI} or \texttt{PDF} file. This is what Knuth calls \textit{weaving} the web --- you weave
the web to produce a beautifully typeset documentation which explains your code and its API, both for
programmers and for users.\\

The original literate programming system was \texttt{WEB} which was used by Knuth when writing \TeX \
typesetting engine. It used a program called \texttt{tangle} which took \texttt{.web} files and output the
source code for \TeX engine written in PASCAL. Another program \texttt{weave} was used to produce the
documentation in \texttt{DVI} format. This documentation was later made available as a book titled
\textit{\TeX : The Program}. The book is available at \texttt{CTAN}, and you can still build both \TeX , the
typesetting engine, and its documentation \cite{knuth1984tex}. \texttt{WEB} could essentially be thought of as
a bunch of macros which were built up on top of \TeX. A version of \texttt{WEB} for C programs called
\texttt{CWEB} was developed by Donald Knuth and Silvio Levy and still used to this day by Knuth and others
\cite{knuth1992literate}.\\

Sometime later, Norman Ramsey came up with \texttt{noweb} literate programming system 
\cite{ramsey1994literate}. It was an improvement over \texttt{WEB} and \texttt{CWEB} thanks to its simplicity
which arose from the simple markup it used to enclose and refer to code chunks. Code chunks were enclosed
within \texttt{<<Name of the chunk>>=} and \texttt{@}. You could refer to another chunk from inside a chunk by
enclosing the name of the reference inside double angles.

The concept of literate programming is best explained with the help of an example. Say, I want to print the
first $n$ terms of the Fibonacci sequence. My language of choice is C, and here is the code:

<<>>=
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char **argv)
{
    int a, b, n;
    a = -1;
    b = 1;
    if (argc < 2) {
        fprintf(stderr, "Please provide `n' as a command line argument\n");
        exit(1);
    }
    else {
        n = atoi(argv[1]);
    }
    if (n < 0) {
        fprintf(stderr, "n >= 0\n");
        exit(1);
    }
    for (int i = 0; i < n; ++i) {
        fprintf(stdout, "%d ", a + b);
        b = b + a;
        a = b - a;
    }
    fprintf(stdout, "Done\n");
    return 0;
}
@

There is a high chance that you would have skipped the code above. I myself do that!! A literate version of
the program could have been written using noweb markup-style as follows:

<<>>=
<<Fibonacci sequence generator>>=
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char **argv)
{
    <<Initialize variables>>
    <<Generate Fibonacci sequence till n terms>>
    fprintf(stdout, "Done\n");
    return 0;
}
@
\verb|@|\\

This gives us the big picture stuff in the fewest of lines. The programmer can then proceed to explain the
working of chunks, for example <<Initialize variables>>, and the chunks which make them up. Such a
documentation wouldn't \textit{repel} attention like the plain verbose code did. Even if we were to scatter
some comments through the source code, it would have still repelled us a bit.\\

\noindent Why?\\

Think about it this way: most humans tend to learn better when they converse with someone, rather than from a
solo fight with the printed letter. The huge popularity of YouTube lectures can be though of as an example of
that. In a similar manner, when a programmer writes a program in literate style, he tends to ruminate and
explain the idea behind a piece of code. And these ideas will often come in a random order. This style of
presentation, a short lecture on a piece of code, would be much more engaging than its traditional
counterpart.

Of course, it is extremely important that the code is not so scattered and \textit{littered} with prose
otherwise instead of a literate program it would be a \textit{littered} program.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Did Literate Programming take off?}

In a way, yes. We have got Jupyter Notebooks and Mathematica, which provide \textit{Notebook} interfaces where
you write your code like you usually do but intersperse it with chunks of markdown text explaining it. It has
its merits --- scientific collaboration is one of them, which led to the code written in Jupyter notebooks
being used to detect gravitational waves. However, notebooks aren't full literate programming systems as they
do not allow you to place chunks anywhere as per your wish or refer to them.\\

The work most cited by fanatics in support of literate programming is \textit{Physically Based Rendering}, a
book on rendering of images in a way that imitates optics in real world, is actually a big literate program
which explains the \texttt{pbrt} library. Its authors won an Academy award as their work was used in movies to
render objects more realistically \cite{pharr2023physically}. Another notable literate program is \textit{
Axiom}, an open-source Computer Algebra System (CAS) maintained by Tim Dally in literate programming style.
He and others have also written a literate version of \textit{Clojure}.\\

Except for a few notable examples, full literate programming systems took off only a bit. Which is sad knowing
that had this approach to programming taken off completely, then programming would have been made more
accessible to people and the quality of code would have improved drastically. Someone on ycombinator said
(roughly, I don't remember the exact words), ``Literate programming requires discipline. It is not suited for
world where software releases are done at such a fast pace.'' --- a statement which I found to be true once I
started working in a corporate. Just think how great it would be if big corporations wrote their code in
literate style --- freelance programmers will be able to understand the codebase and non-technical people
(like managers) could get the big picture of what a program is doing. But... transforming a huge code base
into literate style is a would require too much time and effort, which I don't think any big corporation would
be interested in doing.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Why then another literate programming tool?}

I could have used \texttt{noweb} but I suffer from NIH - `Not Invented Here' syndrome. The \texttt{-L} in
\texttt{notangle} didn't seem to respect the indentation of reference in parent chunk which is not good for
Python code. Its weaved output was largely unreadable for me. And the hacker guide for it was somewhat
confusing --- I could never figure out how I can change styles or fix the operation of \texttt{-L} flag
\cite{ramsey1992noweb}.\\

So, I decided to write LitCode. It consists of four programs:
\begin{enumerate}
    \item \texttt{linit}: Generates \tt litcode.sty \rm file used for styling and referencing chunks.
    \item \texttt{ldump}: Prints JSON containing chunks present in files passed to it as command line
    arguments.
    \item \texttt{ltangle}: Using the JSON generated by \tt ldump \rm it expands a chunk/reference which has
    been passed to it as command line argument.
    \item \texttt{lweave}: Produces \LaTeX equivalent of files passed to it as command line arguments. It
    transpiles the markup characters used by LitCode to their \LaTeX counterparts.
\end{enumerate}

No one is going to probably use this tool except for me. Given my good experiences with literate programming I
feel that I will be using this system for my life!! So without any more nonsense, lets write the source code
for LitCode.\\

\textbf{Note:} Some code is present in \texttt{bootstrap/} which is used to build the current version of
programs making up LitCode system. Those pieces are ran first (as you will see in the \texttt{Makefile} in the
parent directory), and then the newly built LitCode is used to tangle and weave the \texttt{web} files.