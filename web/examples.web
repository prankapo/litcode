\section{Examples}
\subsection{Fibonacci Sequence}
The C code presented in this section is responsible for printing the Fibonacci sequence.\\

I begin by writing the \tt Makefile \rm for building the program.
<<Makefile>>=
CC := gcc -std=C99 -O0

runfib: fibonacci.exe
    ./fibonacci.exe 30

fibonacci.exe: fibonacci.o
    $(CC) fibonacci.o -o fibonacci.exe

fibonacci.o: fibonacci.c
    $(CC) -c fibonacci.c -o fibonacci.o
@

Now comes the fun part. Our code will have two parts: <<Initialize variables>> will be responsible for
initializing the variables which will then be used by <<Generate Fibonacci sequence till n terms>> to generate
the sequence till some $n$ number of terms. $n$ will be provided by the user as a command line argument.

<<fibonacci.c>>=
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char **argv)
{
    <<Initialize variables>>
    <<Generate Fibonacci sequence till n terms>>
    fprintf(stdout, "Done\n");
    return 0;
}
@

To generate Fibonacci sequence, we need three numbers: $a$, $b$, and $n$. $a$ and $b$ will be used to generate
the terms of the sequence till $n$ terms. $n$ will be a command line argument. We will need to check whether
$n$ has been passed or not.

<<Initialize variables>>=
int a, b, n;
a = -1;
b = 1;
<<Check cmd args and Initialize n>>
@

<<Check cmd args and Initialize n>>=
if (argc < 2) {
    fprintf(stderr, "Please provide `n' as a command line argument\n");
    exit(1);
}
else {
    n = atoi(argv[1]);
}
@

We also need to make sure that $n$ is not less than zero. So, we will extend the definition of <<Check cmd
args and Initialize n>>.

<<Check cmd args and Initialize n>>=
if (n < 0) {
    fprintf(stderr, "n >= 0\n");
    exit(1);
}
@

Finally, we write the \textit{generating} portion of our code: <<Generate Fibonacci sequence till n terms>>.

<<Generate Fibonacci sequence till n terms>>=
for (int i = 0; i < n; ++i) {
    fprintf(stdout, "%d ", a + b);
    b = b + a;
    a = b - a;
}
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Printing Prime Numbers}

In this example we are going to print prime numbers. Like in the previous example, we are going to begin by
first define the rules by which \tt prime.c \rm is to be built.

<<Makefile>>=
CC := gcc -std=c99 -O0

runprimes: primes.exe
    ./primes.exe 30

primes.exe: primes.o
    $(CC) primes.o -o primes.exe

prime.o: prime.c
    $(CC) -c primes.c -o primes.o
@

Now comes the interesting part: the C code which will print $n$ prime numbers. The core structure of our code
will be as follows:

<<primes.c>>=
#include <stdio.h>
#include <stdlib.h>

int isPrime(int);

int main(int argc, char **argv)
{
    <<Initialize n>>
    <<Print prime numbers till n reaches 0>>
    return 0;
}
@


Like in the previou example, $n$ will be supplied as a command line argument.

<<Initialize n>>=
int n;
if (argc < 1) {
    fprintf(stderr, "n must be supplied as a command line argument\n");
    exit(1);
}
n = atoi(argv[1]);
@

We will have a loop in which n is decremented by 1 every time a prime number is encountered. Once it reaches
0, the loop ends.

<<Print prime numbers till n reaches 0>>=
int i = 0;
while (n > 0) {
    if (isPrime(i) == 0) {
        fprintf(stdout, "%d ", i);
        --n;
    }
    ++i;
}
fprintf(stdout, "Done\n");
@

In the loop, we are calling \tt isPrime() \rm to check whether the argument we have passed to it is a prime
number or not. This is done by finding the number of divisors of the argument from 2 till
$\frac{\text{argument}}{2}$. If the number of divisors is 0, then the argument is a prime number, else not.
The edge cases are for 0 and 1, which can be dealt with a simple \tt if \rm conditional statement.

<<Check if i is prime or not>>=
int isPrime(int i)
{
    if (i == 0 || i == 1) {
        return 1;
    }
    for (int d = 2; d <= (i / 2); ++d) {
        if (i % d == 0) {
            return 1;
        }
    }
    return 0;
}
@

And we include it below \tt main() \rm in <<primes.c>>.

<<primes.c>>=
<<Check if i is prime or not>>
@

One more thing we should do is to write rules for cleaning the directory. 

<<Makefile>>=

.PHONY: clean

clean: $(wildcard *.o) $(wildcard *.exe) $(wildcard *.out)
    rm -f $^
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Tangling and Weaving the Examples}

With our example codes now written, it is now time to tangle and weave them. Before tangling, we run \tt ldump
\rm to make a dump of the chunks in \texttt{example.web}. Then we can use \tt ltangle \rm to get out the
source code.

<<>>=
$ ldump examples.web > examples.json
$ ltangle -i examples.json -R fibonacci.c -cc '//' > ../examples/fibonacci.c
$ ltangle -i examples.json -R primes.c -cc '//' > ../examples/primes.c
$ ltangle -i examples.json -R Makefile -cc '#' -ut 4 > ../examples/Makefile
@

To run this code, we can move to \tt examples/ \rm and run the \verb|make runfib| and \verb|make runprimes| to
print the first 30 terms of Fibonacci series and first 30 prime numbers, respectively.\\

To weave the documentation, simply run:
<<>>=
$ lweave examples.web > documentation/examples.tex
@

Of course, you will need to have \tt litcode.sty \rm and a main container file from where you can
\verb|\input| the contents of \texttt{examples.tex}. The former can be arranged, by running \texttt{linit}.
For the latter, you will need to set up the container \texttt{tex} yourself.

<<>>=
$ linit documentation/
@
